name: Update Daily Commit Table
on:
  schedule:
    - cron: '1 15 * * *'  # 매일 KST 00:01 실행
  workflow_dispatch:
permissions:
  contents: write
jobs:
  update-table:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install jq (for JSON parsing)
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Update README table
        run: |
          # 테스트용: 06-09 날짜로 고정
          YESTERDAY_KST="2025-06-09"
          TODAY="06-09"
          
          # 원래 코드 (테스트 후 복구용):
          # YESTERDAY_KST=$(TZ=Asia/Seoul date -d "1 day ago" +"%Y-%m-%d")
          # TODAY=$(TZ=Asia/Seoul date -d "1 day ago" +"%m-%d")
          
          # 정확한 UTC 시간 변환
          START_TIME=$(TZ=Asia/Seoul date -d "$YESTERDAY_KST 00:00:00" -u +"%Y-%m-%dT%H:%M:%SZ")
          END_TIME=$(TZ=Asia/Seoul date -d "$YESTERDAY_KST 23:59:59" -u +"%Y-%m-%dT%H:%M:%SZ")
          
          echo "📅 체크 날짜: $YESTERDAY_KST (KST)"
          echo "🕐 UTC 범위: $START_TIME ~ $END_TIME"
          
          # 사용자 정보와 각자의 폴더 매핑 (영어 폴더명으로 테스트)
          USERS=("유진" "사란" "믿디" "숭디" "애용" "즈후")
          GH_USERS=("breadbirds" "icpc365" "itsanisland" "bmlsj" "hanayoung" "bluemango0312")
          FOLDERS=("breadbirds" "icpc365" "itsanisland" "bmlsj" "hanayoung" "bluemango0312")  # GitHub ID로 테스트
          
          # 실제 한글 폴더명을 사용하려면 아래 주석 해제:
          # FOLDERS=("유진" "사란" "믿디" "숭디" "애용" "즈후")
          
          REPO_NAME="breadbirds/DailyAlgorithm"
          LINE="| $TODAY "
          
          for i in "${!USERS[@]}"; do
            user=${USERS[$i]}
            gh_id=${GH_USERS[$i]}
            target_folder=${FOLDERS[$i]}
            
            echo "👤 $user ($gh_id) → 📁 $target_folder 폴더 확인 중..."
            
            # 한글 폴더명 URL 인코딩
            encoded_folder=$(echo "$target_folder" | python3 -c "import sys, urllib.parse; print(urllib.parse.quote(sys.stdin.read().strip()))")
            echo "   🔗 인코딩된 폴더명: $encoded_folder"
            
            # 방법 1: REST API로 특정 폴더 커밋 확인
            folder_commits=$(curl -s "https://api.github.com/repos/$REPO_NAME/commits?author=$gh_id&path=$encoded_folder&since=$START_TIME&until=$END_TIME" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}")
            
            # API 응답 확인 및 에러 처리
            echo "   🔍 API 응답 확인:"
            echo "$folder_commits" | head -200 | sed 's/^/      /'
            
            # JSON 유효성 검사
            if echo "$folder_commits" | jq empty 2>/dev/null; then
              folder_count=$(echo "$folder_commits" | jq '. | length // 0')
            else
              echo "   ❌ JSON 파싱 오류 발생"
              folder_count=0
            fi
            
            # 방법 2: Search API로 교차 검증
            search_query="repo:$REPO_NAME+author:$gh_id+path:$encoded_folder+committer-date:$START_TIME..$END_TIME"
            search_response=$(curl -s "https://api.github.com/search/commits?q=$search_query" \
              -H "Accept: application/vnd.github.cloak-preview" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}")
            
            # Search API 응답도 검증
            if echo "$search_response" | jq empty 2>/dev/null; then
              search_count=$(echo "$search_response" | jq -r '.total_count // 0')
            else
              echo "   ❌ Search API JSON 파싱 오류"
              search_count=0
            fi
            
            echo "   📊 REST API: $folder_count개, Search API: $search_count개"
            
            # 커밋 상세 정보 출력 (디버깅)
            if [[ "$folder_count" -gt 0 ]]; then
              echo "   ✅ $target_folder 폴더에 커밋 발견!"
              echo "   📋 커밋 내역:"
              if echo "$folder_commits" | jq empty 2>/dev/null; then
                echo "$folder_commits" | jq -r '.[0:3][] | "      • " + .commit.message + " (" + (.commit.committer.date | split("T")[0]) + ")"' 2>/dev/null || echo "      커밋 정보 파싱 실패"
              fi
              
              echo "   📂 수정된 파일들:"
              # 각 커밋에서 수정된 파일 확인
              if echo "$folder_commits" | jq empty 2>/dev/null; then
                for commit_sha in $(echo "$folder_commits" | jq -r '.[0:2][] | .sha' 2>/dev/null || echo ""); do
                  if [[ -n "$commit_sha" ]]; then
                    files=$(curl -s "https://api.github.com/repos/$REPO_NAME/commits/$commit_sha" \
                      -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" | \
                      jq -r '.files[]? | select(.filename | startswith("'$encoded_folder'/")) | .filename' 2>/dev/null | head -3)
                    if [[ -n "$files" ]]; then
                      echo "$files" | sed 's/^/      • /'
                    fi
                    sleep 0.5  # API Rate limit 방지
                  fi
                done
              fi
            else
              echo "   ❌ $target_folder 폴더에 커밋 없음"
              
              # 다른 폴더에 커밋했는지 확인
              all_commits=$(curl -s "https://api.github.com/repos/$REPO_NAME/commits?author=$gh_id&since=$START_TIME&until=$END_TIME" \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}")
              
              if echo "$all_commits" | jq empty 2>/dev/null; then
                all_count=$(echo "$all_commits" | jq '. | length // 0')
              else
                all_count=0
              fi
              
              if [[ "$all_count" -gt 0 ]]; then
                echo "   ⚠️  다른 폴더에 $all_count개 커밋 발견:"
                if echo "$all_commits" | jq empty 2>/dev/null; then
                  for commit_sha in $(echo "$all_commits" | jq -r '.[0:2][] | .sha' 2>/dev/null || echo ""); do
                    if [[ -n "$commit_sha" ]]; then
                      files=$(curl -s "https://api.github.com/repos/$REPO_NAME/commits/$commit_sha" \
                        -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" | \
                        jq -r '.files[]? | .filename' 2>/dev/null | head -3)
                      if [[ -n "$files" ]]; then
                        echo "$files" | sed 's/^/      • /'
                      fi
                      sleep 0.5
                    fi
                  done
                fi
              fi
            fi
            
            # 최종 판정: 자신의 폴더에 커밋했는지만 체크
            if [[ "$folder_count" -gt 0 ]]; then
              LINE="$LINE| ✅ "
            else
              LINE="$LINE| ❌ "
            fi
            
            echo ""
            sleep 1  # API Rate limit 방지
          done
          
          LINE="$LINE|"
          echo "📋 최종 결과: $LINE"
          
          # README.md 갱신
          awk -v date="$TODAY" -v newline="$LINE" '
          BEGIN{updated=0}
          {
            if ($0 ~ "\\| "date" \\|") {
              print newline
              updated=1
            } else {
              print $0
            }
          }
          END{
            if (updated==0) {
              print newline
            }
          }' README.md > tmp && mv tmp README.md
          
      - name: Commit updated README
        run: |
          git config user.name github-actions
          git config user.email actions@github.com
          git add README.md
          git commit -m "✅ [$TODAY] 폴더별 커밋 현황 갱신" || echo "No change"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
